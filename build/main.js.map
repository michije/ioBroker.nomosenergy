{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["\"use strict\";\n\nimport * as utils from \"@iobroker/adapter-core\";\nimport axios, { AxiosResponse } from \"axios\";\n\n// Define your adapter's configuration interface\n// Use a different approach since utils.AdapterConfig is not exported\ninterface NomosEnergyAdapterConfig {\n    client_id: string;\n    client_secret: string;\n    // Add any other configuration properties your adapter uses\n}\n\ninterface PriceItem {\n    timestamp: string;\n    amount: number;\n}\n\ninterface PriceData {\n    items?: PriceItem[];\n}\n\ninterface TokenResponse {\n    access_token: string;\n}\n\ninterface Subscription {\n    id: string;\n}\n\ninterface SubscriptionsResponse {\n    items: Subscription[];\n}\n\ninterface ChartConfig {\n    backgroundColor: string;\n    title: {\n        text: string;\n        textStyle: {\n            color: string;\n        };\n    };\n    tooltip: {\n        trigger: string;\n        axisPointer: {\n            type: string;\n        };\n    };\n    grid: {\n        left: string;\n        right: string;\n        top: string;\n        bottom: string;\n    };\n    xAxis: {\n        type: string;\n        boundaryGap: boolean;\n        data: string[];\n    };\n    yAxis: {\n        type: string;\n        axisLabel: {\n            formatter: string;\n        };\n        axisPointer: {\n            snap: boolean;\n        };\n    };\n    visualMap: {\n        min: number;\n        max: number;\n        inRange: {\n            color: string[];\n        };\n        show: boolean;\n    };\n    series: {\n        name: string;\n        type: string;\n        step: string;\n        symbol: string;\n        data: (number | null)[];\n        markArea: {\n            itemStyle: {\n                color: string;\n            };\n            data: [\n                [\n                    {\n                        xAxis: string;\n                    },\n                    {\n                        xAxis: string;\n                    }\n                ]\n            ];\n        };\n    }[];\n}\n\nclass Nomosenergy extends utils.Adapter {\n    private updateInterval: NodeJS.Timeout | null = null;\n    private hourlyUpdateInterval: NodeJS.Timeout | null = null;\n    \n    // Access config as a general object with string indexing to bypass type checks\n    private get nomosConfig(): NomosEnergyAdapterConfig {\n        return this.config as any;\n    }\n\n    constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"nomosenergy\",\n        });\n\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n\n    async onReady(): Promise<void> {\n        await this.setObjectNotExistsAsync(\"info.last_update_time\", {\n            type: \"state\",\n            common: {\n                name: \"Last update time\",\n                type: \"string\",\n                role: \"date\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync(\"info.last_update_success\", {\n            type: \"state\",\n            common: {\n                name: \"Last update success\",\n                type: \"boolean\",\n                role: \"indicator\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n\n        const updateData = async (): Promise<void> => {\n            try {\n                const token = await this.authenticate();\n                const subscriptionId = await this.getSubscriptionId(token);\n                const priceData = await this.getPriceSeries(token, subscriptionId);\n                await this.storePrices(priceData);\n                await this.updateCurrentPrice();\n                await this.setStateAsync(\"info.last_update_time\", new Date().toISOString(), true);\n                await this.setStateAsync(\"info.last_update_success\", true, true);\n                this.log.info(\"Data updated successfully\");\n            } catch (error: any) {\n                await this.setStateAsync(\"info.last_update_success\", false, true);\n                this.log.error(\"Update failed: \" + error.message);\n            }\n        };\n\n        await updateData();\n\n        const now = new Date();\n        const msUntilNextHour = (60 - now.getMinutes()) * 60 * 1000 - now.getSeconds() * 1000 - now.getMilliseconds();\n\n        setTimeout(() => {\n            updateData();\n            this.updateInterval = setInterval(updateData, 60 * 60 * 1000);\n        }, msUntilNextHour);\n\n        await this.updateCurrentPrice();\n\n        setTimeout(() => {\n            this.updateCurrentPrice();\n            this.hourlyUpdateInterval = setInterval(this.updateCurrentPrice.bind(this), 60 * 60 * 1000);\n        }, msUntilNextHour);\n    }\n\n    onUnload(callback: () => void): void {\n        try {\n            if (this.updateInterval) {\n                clearInterval(this.updateInterval);\n                this.updateInterval = null;\n            }\n            if (this.hourlyUpdateInterval) {\n                clearInterval(this.hourlyUpdateInterval);\n                this.hourlyUpdateInterval = null;\n            }\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    async authenticate(): Promise<string> {\n        if (!this.nomosConfig.client_id || !this.nomosConfig.client_secret) {\n            throw new Error(\"Client ID or Client Secret not configured\");\n        }\n\n        const authString = Buffer.from(`${this.nomosConfig.client_id}:${this.nomosConfig.client_secret}`).toString(\"base64\");\n        const headers = {\n            Authorization: `Basic ${authString}`,\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n        };\n        const data = \"grant_type=client_credentials\";\n\n        try {\n            const response: AxiosResponse<TokenResponse> = await axios.post(\n                \"https://api.nomos.energy/oauth/token\",\n                data,\n                { headers }\n            );\n\n            if (!response.data.access_token) {\n                throw new Error(\"No access token received\");\n            }\n\n            return response.data.access_token;\n        } catch (error: any) {\n            throw new Error(`Authentication failed: ${error.message}`);\n        }\n    }\n\n    async getSubscriptionId(token: string): Promise<string> {\n        const headers = {\n            Authorization: `Bearer ${token}`,\n        };\n\n        try {\n            const response: AxiosResponse<SubscriptionsResponse> = await axios.get(\n                \"https://api.nomos.energy/subscriptions\",\n                { headers }\n            );\n\n            const subscriptions = response.data.items;\n            if (!subscriptions || subscriptions.length === 0) {\n                throw new Error(\"No subscriptions found\");\n            }\n\n            const subscriptionId = subscriptions[0].id;\n            this.log.info(`Using subscription ID: ${subscriptionId}`);\n            return subscriptionId;\n        } catch (error: any) {\n            throw new Error(`Failed to fetch subscriptions: ${error.message}`);\n        }\n    }\n\n    async getPriceSeries(token: string, subscriptionId: string): Promise<PriceData> {\n        const today = new Date().toISOString().split(\"T\")[0];\n        const tomorrow = new Date(Date.now() + 86400000).toISOString().split(\"T\")[0];\n\n        const params = {\n            start: today,\n            end: tomorrow,\n        };\n\n        const headers = {\n            Authorization: `Bearer ${token}`,\n        };\n\n        try {\n            const response: AxiosResponse<PriceData> = await axios.get(\n                `https://api.nomos.energy/subscriptions/${subscriptionId}/prices`,\n                { headers, params }\n            );\n\n            return response.data;\n        } catch (error: any) {\n            throw new Error(`Failed to fetch price series: ${error.message}`);\n        }\n    }\n\n    async storePrices(priceData: PriceData): Promise<void> {\n    const today = new Date().toISOString().split(\"T\")[0];\n    const tomorrow = new Date(Date.now() + 86400000).toISOString().split(\"T\")[0];\n\n    await this.setObjectNotExistsAsync(\"prices_today\", {\n        type: \"channel\",\n        common: { name: \"Prices for today\" },\n        native: {},\n    });\n\n    await this.setObjectNotExistsAsync(\"prices_tomorrow\", {\n        type: \"channel\",\n        common: { name: \"Prices for tomorrow\" },\n        native: {},\n    });\n\n    const items = priceData.items || [];\n\n    // Store individual price states\n    for (const item of items) {\n        const timestamp = item.timestamp;\n        const dateStr = timestamp.split(\"T\")[0];\n        const hour = new Date(timestamp).getUTCHours().toString(); // Use UTC hours\n        const folder = dateStr === today ? \"prices_today\" : dateStr === tomorrow ? \"prices_tomorrow\" : null;\n\n        if (folder) {\n            const stateId = `${folder}.${hour}`;\n            await this.setObjectNotExistsAsync(stateId, {\n                type: \"state\",\n                common: {\n                    name: `Price for hour ${hour}`,\n                    type: \"number\",\n                    role: \"value\",\n                    unit: \"ct/kWh\",\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            });\n\n            await this.setStateAsync(stateId, item.amount, true);\n        }\n    }\n\n    // Generate chart data starting from today at 00:00 UTC\n    const chartToday = new Date();\n    chartToday.setUTCHours(0, 0, 0, 0); // Start of today in UTC\n\n    const xAxisData: string[] = [];\n    const seriesData: (number | null)[] = [];\n\n    for (let i = 0; i <= 48; i++) {\n        const currentDate = new Date(chartToday.getTime() + i * 3600000);\n        const day = currentDate.getUTCDate().toString().padStart(2, \"0\");\n        const month = (currentDate.getUTCMonth() + 1).toString().padStart(2, \"0\");\n        const hour = currentDate.getUTCHours().toString().padStart(2, \"0\");\n\n        xAxisData.push(`${day}.${month}.\\n${hour}:00`);\n\n        const matchingItem = items.find(item => {\n            const itemDate = new Date(item.timestamp);\n            return (\n                itemDate.getUTCFullYear() === currentDate.getUTCFullYear() &&\n                itemDate.getUTCMonth() === currentDate.getUTCMonth() &&\n                itemDate.getUTCDate() === currentDate.getUTCDate() &&\n                itemDate.getUTCHours() === currentDate.getUTCHours()\n            );\n        });\n\n        seriesData.push(matchingItem ? matchingItem.amount : null);\n    }\n\n    const chartConfig: ChartConfig = {\n        backgroundColor: \"rgb(232, 232, 232)\",\n        title: {\n            text: \"Nomos Energy Price\",\n            textStyle: {\n                color: \"#ffffff\"\n            }\n        },\n        tooltip: {\n            trigger: \"axis\",\n            axisPointer: {\n                type: \"cross\"\n            }\n        },\n        grid: {\n            left: \"17%\",\n            right: \"1%\",\n            top: \"2%\",\n            bottom: \"12%\"\n        },\n        xAxis: {\n            type: \"category\",\n            boundaryGap: false,\n            data: xAxisData\n        },\n        yAxis: {\n            type: \"value\",\n            axisLabel: {\n                formatter: \"{value} ct/kWh\"\n            },\n            axisPointer: {\n                snap: true\n            }\n        },\n        visualMap: {\n            min: 0.2,\n            max: 0.3,\n            inRange: {\n                color: [\"green\", \"yellow\", \"red\"]\n            },\n            show: false\n        },\n        series: [\n            {\n                name: \"Total\",\n                type: \"line\",\n                step: \"end\",\n                symbol: \"none\",\n                data: seriesData,\n                markArea: {\n                    itemStyle: {\n                        color: \"rgba(120, 200, 120, 0.2)\"\n                    },\n                    data: [\n                        [\n                            { xAxis: \"\" },\n                            { xAxis: \"\" }\n                        ]\n                    ]\n                }\n            }\n        ]\n    };\n\n    const chartConfigString = JSON.stringify(chartConfig);\n\n    await this.setObjectNotExistsAsync(\"prices.chart_config\", {\n        type: \"state\",\n        common: {\n            name: \"Chart configuration for prices\",\n            type: \"string\",\n            role: \"json\",\n            read: true,\n            write: false\n        },\n        native: {}\n    });\n\n    await this.setStateAsync(\"prices.chart_config\", chartConfigString, true);\n}\n\n    async updateCurrentPrice(): Promise<void> {\n        const now = new Date();\n        const currentHour = now.getHours().toString();\n        const stateId = `prices_today.${currentHour}`;\n\n        await this.setObjectNotExistsAsync(\"prices.current_Price\", {\n            type: \"state\",\n            common: {\n                name: \"Current price\",\n                type: \"number\",\n                role: \"value\",\n                unit: \"ct/kWh\",\n                read: true,\n                write: false\n            },\n            native: {}\n        });\n\n        const priceState = await this.getStateAsync(stateId);\n        const currentPrice = priceState && priceState.val !== null ? priceState.val : null;\n\n        await this.setStateAsync(\"prices.current_Price\", currentPrice, true);\n    }\n}\n\n// Export the constructor in a way that allows the constructor to be extended\nexport = (options?: Partial<utils.AdapterOptions>) => new Nomosenergy(options);\n\n// If this file is called directly, start the adapter\nif (require.main === module) {\n    (() => new Nomosenergy())();\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
