{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import { Adapter, AdapterOptions } from \"@iobroker/adapter-core\";\nimport axios, { AxiosResponse } from \"axios\";\n\ninterface Config {\n    client_id?: string;\n    client_secret?: string;\n}\n\ninterface PriceItem {\n    timestamp: string;\n    amount: number;\n}\n\ninterface PriceData {\n    items: PriceItem[];\n}\n\ninterface Subscription {\n    id: string;\n}\n\nclass Nomosenergy extends Adapter {\n    private updateInterval: NodeJS.Timeout | null = null;\n    private hourlyUpdateInterval: NodeJS.Timeout | null = null;\n\n    constructor(options: AdapterOptions) {\n        super(options);\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n\n    private async onReady(): Promise<void> {\n        await this.setObjectNotExistsAsync(\"info.last_update_time\", {\n            type: \"state\",\n            common: {\n                name: \"Last update time\",\n                type: \"string\",\n                role: \"date\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync(\"info.last_update_success\", {\n            type: \"state\",\n            common: {\n                name: \"Last update success\",\n                type: \"boolean\",\n                role: \"indicator\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n\n        const updateData = async (): Promise<void> => {\n            try {\n                const token: string = await this.authenticate();\n                const subscriptionId: string = await this.getSubscriptionId(token);\n                const priceData: PriceData = await this.getPriceSeries(token, subscriptionId);\n                await this.storePrices(priceData);\n                await this.updateCurrentPrice();\n                await this.setStateAsync(\"info.last_update_time\", new Date().toISOString(), true);\n                await this.setStateAsync(\"info.last_update_success\", true, true);\n                this.log.info(\"Data updated successfully\");\n            } catch (error: unknown) {\n                await this.setStateAsync(\"info.last_update_success\", false, true);\n                this.log.error(`Update failed: ${(error as Error).message || String(error)}`);\n            }\n        };\n\n        await updateData();\n\n        const now: Date = new Date();\n        const msUntilNextHour: number = (60 - now.getMinutes()) * 60 * 1000 - now.getSeconds() * 1000 - now.getMilliseconds();\n        setTimeout(() => {\n            updateData();\n            this.updateInterval = setInterval(updateData, 60 * 60 * 1000);\n        }, msUntilNextHour);\n\n        await this.updateCurrentPrice();\n        setTimeout(() => {\n            this.updateCurrentPrice();\n            this.hourlyUpdateInterval = setInterval(this.updateCurrentPrice.bind(this), 60 * 60 * 1000);\n        }, msUntilNextHour);\n    }\n\n    private onUnload(callback: () => void): void {\n        try {\n            if (this.updateInterval) {\n                clearInterval(this.updateInterval);\n                this.updateInterval = null;\n            }\n            if (this.hourlyUpdateInterval) {\n                clearInterval(this.hourlyUpdateInterval);\n                this.hourlyUpdateInterval = null;\n            }\n            callback();\n        } catch {\n            callback();\n        }\n    }\n\n    private async authenticate(): Promise<string> {\n        const config = this.config as Config;\n        if (!config.client_id || !config.client_secret) {\n            throw new Error(\"Client ID or Client Secret not configured\");\n        }\n\n        const authString: string = Buffer.from(`${config.client_id}:${config.client_secret}`).toString(\"base64\");\n        const headers = {\n            Authorization: `Basic ${authString}`,\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n        };\n        const data: string = \"grant_type=client_credentials\";\n\n        try {\n            const response: AxiosResponse<{ access_token: string }> = await axios.post(\n                \"https://api.nomos.energy/oauth/token\",\n                data,\n                { headers }\n            );\n            if (!response.data.access_token) {\n                throw new Error(\"No access token received\");\n            }\n            return response.data.access_token;\n        } catch (error: unknown) {\n            throw new Error(`Authentication failed: ${(error as Error).message || String(error)}`);\n        }\n    }\n\n    private async getSubscriptionId(token: string): Promise<string> {\n        const headers = {\n            Authorization: `Bearer ${token}`,\n        };\n        try {\n            const response: AxiosResponse<{ items: Subscription[] }> = await axios.get(\n                \"https://api.nomos.energy/subscriptions\",\n                { headers }\n            );\n            const subscriptions = response.data.items;\n            if (!subscriptions || subscriptions.length === 0) {\n                throw new Error(\"No subscriptions found\");\n            }\n            const subscriptionId: string = subscriptions[0].id;\n            this.log.info(`Using subscription ID: ${subscriptionId}`);\n            return subscriptionId;\n        } catch (error: unknown) {\n            throw new Error(`Failed to fetch subscriptions: ${(error as Error).message || String(error)}`);\n        }\n    }\n\n    private async getPriceSeries(token: string, subscriptionId: string): Promise<PriceData> {\n        const today: string = new Date().toISOString().split(\"T\")[0];\n        const tomorrow: string = new Date(Date.now() + 86400000).toISOString().split(\"T\")[0];\n        const params = {\n            start: today,\n            end: tomorrow,\n        };\n        const headers = {\n            Authorization: `Bearer ${token}`,\n        };\n        try {\n            const response: AxiosResponse<PriceData> = await axios.get(\n                `https://api.nomos.energy/subscriptions/${subscriptionId}/prices`,\n                { headers, params }\n            );\n            return response.data;\n        } catch (error: unknown) {\n            throw new Error(`Failed to fetch price series: ${(error as Error).message || String(error)}`);\n        }\n    }\n\n    private async storePrices(priceData: PriceData): Promise<void> {\n        const today: string = new Date().toISOString().split(\"T\")[0];\n        const tomorrow: string = new Date(Date.now() + 86400000).toISOString().split(\"T\")[0];\n\n        await this.setObjectNotExistsAsync(\"prices_today\", {\n            type: \"channel\",\n            common: { name: \"Prices for today\" },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync(\"prices_tomorrow\", {\n            type: \"channel\",\n            common: { name: \"Prices for tomorrow\" },\n            native: {},\n        });\n\n        const items: PriceItem[] = priceData.items || [];\n        for (const item of items) {\n            const timestamp: string = item.timestamp;\n            const dateStr: string = timestamp.split(\"T\")[0];\n            const hour: string = new Date(timestamp).getHours().toString();\n            const folder: string | null = dateStr === today ? \"prices_today\" : dateStr === tomorrow ? \"prices_tomorrow\" : null;\n            if (folder) {\n                const stateId: string = `${folder}.${hour}`;\n                await this.setObjectNotExistsAsync(stateId, {\n                    type: \"state\",\n                    common: {\n                        name: `Price for hour ${hour}`,\n                        type: \"number\",\n                        role: \"value\",\n                        unit: \"ct/kWh\",\n                        read: true,\n                        write: false,\n                    },\n                    native: {},\n                });\n                await this.setStateAsync(stateId, item.amount, true);\n            }\n        }\n\n        const chartToday: Date = new Date();\n        chartToday.setHours(0, 0, 0, 0);\n        const xAxisData: string[] = [];\n        const seriesData: (number | null)[] = [];\n        for (let i = 0; i <= 48; i++) {\n            const currentDate: Date = new Date(chartToday.getTime() + i * 3600000);\n            const day: string = currentDate.getDate().toString().padStart(2, \"0\");\n            const month: string = (currentDate.getMonth() + 1).toString().padStart(2, \"0\");\n            const hour: string = currentDate.getHours().toString().padStart(2, \"0\");\n            xAxisData.push(`${day}.${month}.\\n${hour}:00`);\n\n            const matchingItem: PriceItem | undefined = items.find((item: PriceItem) => {\n                const itemDate: Date = new Date(item.timestamp);\n                return itemDate.getTime() === currentDate.getTime();\n            });\n            seriesData.push(matchingItem ? matchingItem.amount : null);\n        }\n\n        const chartConfig: any = {\n            backgroundColor: \"rgb(232, 232, 232)\",\n            title: {\n                text: \"Nomos Energy Price\",\n                textStyle: {\n                    color: \"#ffffff\"\n                }\n            },\n            tooltip: {\n                trigger: \"axis\",\n                axisPointer: {\n                    type: \"cross\"\n                }\n            },\n            grid: {\n                left: \"10%\",\n                right: \"4%\",\n                top: \"8%\",\n                bottom: \"8%\"\n            },\n            xAxis: {\n                type: \"category\",\n                boundaryGap: false,\n                data: xAxisData\n            },\n            yAxis: {\n                type: \"value\",\n                axisLabel: {\n                    formatter: \"{value} ct/kWh\"\n                },\n                axisPointer: {\n                    snap: true\n                }\n            },\n            visualMap: {\n                min: 0.2,\n                max: 0.3,\n                inRange: {\n                    color: [\"green\", \"yellow\", \"red\"]\n                },\n                show: false\n            },\n            series: [\n                {\n                    name: \"Total\",\n                    type: \"line\",\n                    step: \"end\",\n                    symbol: \"none\",\n                    data: seriesData,\n                    markArea: {\n                        itemStyle: {\n                            color: \"rgba(120, 200, 120, 0.2)\"\n                        },\n                        data: [\n                            [{ xAxis: \"\" }, { xAxis: \"\" }]\n                        ]\n                    }\n                }\n            ]\n        };\n\n        const chartConfigString: string = JSON.stringify(chartConfig);\n\n        await this.setObjectNotExistsAsync(\"prices.chart_config\", {\n            type: \"state\",\n            common: {\n                name: \"Chart configuration for prices\",\n                type: \"string\",\n                role: \"json\",\n                read: true,\n                write: false\n            },\n            native: {}\n        });\n\n        await this.setStateAsync(\"prices.chart_config\", chartConfigString, true);\n    }\n\n    private async updateCurrentPrice(): Promise<void> {\n        const now: Date = new Date();\n        const currentHour: string = now.getHours().toString();\n        const stateId: string = `prices_today.${currentHour}`;\n\n        await this.setObjectNotExistsAsync(\"prices.current_Price\", {\n            type: \"state\",\n            common: {\n                name: \"Current price\",\n                type: \"number\",\n                role: \"value\",\n                unit: \"ct/kWh\",\n                read: true,\n                write: false\n            },\n            native: {}\n        });\n\n        const priceState = await this.getStateAsync(stateId);\n        const currentPrice: number | null = priceState && priceState.val !== null ? priceState.val as number : null;\n        await this.setStateAsync(\"prices.current_Price\", currentPrice, true);\n    }\n}\n\nexport = (options: AdapterOptions): Nomosenergy => new Nomosenergy(options);\n"],
  "mappings": "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",
  "names": ["axios"]
}
